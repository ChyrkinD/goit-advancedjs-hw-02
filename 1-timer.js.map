{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate = null;\nlet intervalId = null;\nconst refs = {\n  inputDate: document.querySelector('#datetime-picker'),\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n  btnStart: document.querySelector('[data-start]'),\n};\n\nflatpickr(refs.inputDate, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] > Date.now()) {\n      userSelectedDate = selectedDates[0];\n      refs.btnStart.disabled = false;\n    } else {\n      iziToast.show({\n        message: '❌ Please choose a date in the future',\n        color: 'red',\n        messageColor: 'red',\n        position: 'topRight',\n        timeout: 4000,\n        progressBar: false,\n        close: false,\n      });\n    }\n  },\n});\n\nconst start = () => {\n  intervalId = setInterval(() => {\n    const diff = userSelectedDate - Date.now();\n\n    if (diff < 0) {\n      stop();\n      return;\n    }\n\n    const timeComponent = convertMs(diff);\n    refs.days.textContent = pad(timeComponent.days);\n    refs.hours.textContent = pad(timeComponent.hours);\n    refs.minutes.textContent = pad(timeComponent.minutes);\n    refs.seconds.textContent = pad(timeComponent.seconds);\n  }, 1000);\n};\n\nconst stop = () => {\n  clearInterval(intervalId);\n};\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconst pad = value => {\n  return String(value).padStart(2, '0');\n};\n\nrefs.btnStart.addEventListener('click', start);\n"],"names":["userSelectedDate","intervalId","refs","flatpickr","selectedDates","iziToast","start","diff","stop","timeComponent","convertMs","pad","ms","days","hours","minutes","seconds","value"],"mappings":"+IAKA,IAAIA,EAAmB,KACnBC,EAAa,KACjB,MAAMC,EAAO,CACX,UAAW,SAAS,cAAc,kBAAkB,EACpD,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,EAChD,SAAU,SAAS,cAAc,cAAc,CACjD,EAEAC,EAAUD,EAAK,UAAW,CACxB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQE,EAAe,CACjBA,EAAc,CAAC,EAAI,KAAK,IAAG,GAC7BJ,EAAmBI,EAAc,CAAC,EAClCF,EAAK,SAAS,SAAW,IAEzBG,EAAS,KAAK,CACZ,QAAS,uCACT,MAAO,MACP,aAAc,MACd,SAAU,WACV,QAAS,IACT,YAAa,GACb,MAAO,EACf,CAAO,CAEJ,CACH,CAAC,EAED,MAAMC,EAAQ,IAAM,CAClBL,EAAa,YAAY,IAAM,CAC7B,MAAMM,EAAOP,EAAmB,KAAK,IAAG,EAExC,GAAIO,EAAO,EAAG,CACZC,IACA,MACD,CAED,MAAMC,EAAgBC,EAAUH,CAAI,EACpCL,EAAK,KAAK,YAAcS,EAAIF,EAAc,IAAI,EAC9CP,EAAK,MAAM,YAAcS,EAAIF,EAAc,KAAK,EAChDP,EAAK,QAAQ,YAAcS,EAAIF,EAAc,OAAO,EACpDP,EAAK,QAAQ,YAAcS,EAAIF,EAAc,OAAO,CACrD,EAAE,GAAI,CACT,EAEMD,EAAO,IAAM,CACjB,cAAcP,CAAU,CAC1B,EAEA,SAASS,EAAUE,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,MAAML,EAAMM,GACH,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,EAGtCf,EAAK,SAAS,iBAAiB,QAASI,CAAK"}